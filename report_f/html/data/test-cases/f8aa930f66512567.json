{"uid":"f8aa930f66512567","name":"test_login[admin-123456-\\u767b\\u5f55\\u533b\\u836f\\u7ba1\\u7406\\u7cfb\\u7edf]","fullName":"case_f.goods_doctor_manage_sele#test_login","historyId":"5bd98383790fadc4762b327088bf1730","time":{"start":1751269130559,"stop":1751269152580,"duration":22021},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: MicrosoftEdge=138.0.3351.55)\nStacktrace:\n\tZwWaitLowEventPair [0x0x7ffe52a12a2c+2769580]\n\tGetHandleVerifier [0x0x7ff7b7ed8285+23461]\n\t(No symbol) [0x0x7ff7b7e2c370]\n\tGetHandleVerifier [0x0x7ff7b81501b8+2611928]\n\t(No symbol) [0x0x7ff7b7bece20]\n\t(No symbol) [0x0x7ff7b7c0b61a]\n\t(No symbol) [0x0x7ff7b7c6fd1b]\n\t(No symbol) [0x0x7ff7b7c86e5a]\n\t(No symbol) [0x0x7ff7b7c6a423]\n\t(No symbol) [0x0x7ff7b7c3ea86]\n\t(No symbol) [0x0x7ff7b7c3dd11]\n\t(No symbol) [0x0x7ff7b7c3e8b3]\n\t(No symbol) [0x0x7ff7b7d3dd3d]\n\t(No symbol) [0x0x7ff7b7d4b0c8]\n\tGetHandleVerifier [0x0x7ff7b7fb80cb+940523]\n\tGetHandleVerifier [0x0x7ff7b7fc0e21+976705]\n\t(No symbol) [0x0x7ff7b7e39f61]\n\t(No symbol) [0x0x7ff7b7e32944]\n\t(No symbol) [0x0x7ff7b7e32a93]\n\t(No symbol) [0x0x7ff7b7e24536]\n\tuaw_wcsrchr [0x0x7ffe4f1909fc+962364]\n\tuaw_wcsrchr [0x0x7ffe4f127bb0+532720]\n\tZwWaitLowEventPair [0x0x7ffe5291c4c8+1760584]","statusTrace":"uname = 'admin', upwd = '123456', title = '登录医药管理系统'\n\n    @pytest.mark.parametrize(\"uname,upwd,title\",[(\"admin\",\"123456\",\"登录医药管理系统\"),(\"adminsss\",\"admin123\",\"登录医药管理系统\"),(\"sdcsdcs\",\"csdcsd\",\"登录医药管理系统1212\"),\n                                           (\"admin\",\"admin123\",\"管理系统\")])\n    def test_login(uname,upwd,title):\n    \n        llq.get(\"http://127.0.0.1:8008\");\n    \n        time.sleep(3);\n    \n        llq.find_element(by=By.NAME,value=\"username\").clear();\n        time.sleep(3)\n        llq.find_element(by=By.NAME,value=\"username\").send_keys(uname);\n        time.sleep(3)\n        llq.find_element(by=By.NAME,value=\"password\").clear();\n        time.sleep(3)\n        llq.find_element(by=By.NAME,value=\"password\").send_keys(upwd);\n        time.sleep(3)\n        llq.find_element(by=By.ID,value=\"btnSubmit\").click();\n        time.sleep(5)\n        #判定登录成功与否\n>       assert llq.title == title;\n\n..\\case_f\\goods_doctor_manage_sele.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C9AFD790F0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...e4f1909fc+962364]\\\\n\\\\tuaw_wcsrchr [0x0x7ffe4f127bb0+532720]\\\\n\\\\tZwWaitLowEventPair [0x0x7ffe5291c4c8+1760584]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: MicrosoftEdge=138.0.3351.55)\nE       Stacktrace:\nE       \tZwWaitLowEventPair [0x0x7ffe52a12a2c+2769580]\nE       \tGetHandleVerifier [0x0x7ff7b7ed8285+23461]\nE       \t(No symbol) [0x0x7ff7b7e2c370]\nE       \tGetHandleVerifier [0x0x7ff7b81501b8+2611928]\nE       \t(No symbol) [0x0x7ff7b7bece20]\nE       \t(No symbol) [0x0x7ff7b7c0b61a]\nE       \t(No symbol) [0x0x7ff7b7c6fd1b]\nE       \t(No symbol) [0x0x7ff7b7c86e5a]\nE       \t(No symbol) [0x0x7ff7b7c6a423]\nE       \t(No symbol) [0x0x7ff7b7c3ea86]\nE       \t(No symbol) [0x0x7ff7b7c3dd11]\nE       \t(No symbol) [0x0x7ff7b7c3e8b3]\nE       \t(No symbol) [0x0x7ff7b7d3dd3d]\nE       \t(No symbol) [0x0x7ff7b7d4b0c8]\nE       \tGetHandleVerifier [0x0x7ff7b7fb80cb+940523]\nE       \tGetHandleVerifier [0x0x7ff7b7fc0e21+976705]\nE       \t(No symbol) [0x0x7ff7b7e39f61]\nE       \t(No symbol) [0x0x7ff7b7e32944]\nE       \t(No symbol) [0x0x7ff7b7e32a93]\nE       \t(No symbol) [0x0x7ff7b7e24536]\nE       \tuaw_wcsrchr [0x0x7ffe4f1909fc+962364]\nE       \tuaw_wcsrchr [0x0x7ffe4f127bb0+532720]\nE       \tZwWaitLowEventPair [0x0x7ffe5291c4c8+1760584]\n\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"case_f"},{"name":"suite","value":"goods_doctor_manage_sele"},{"name":"host","value":"P7E7"},{"name":"thread","value":"2192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"case_f.goods_doctor_manage_sele"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"title","value":"'登录医药管理系统'"},{"name":"uname","value":"'admin'"},{"name":"upwd","value":"'123456'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"94bdcce43a04e4a1","status":"passed","time":{"start":1751269054775,"stop":1751269077404,"duration":22629}},{"uid":"b66855f344895351","status":"passed","time":{"start":1751268262853,"stop":1751268285991,"duration":23138}},{"uid":"eb45e092aca18fb0","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: MicrosoftEdge=138.0.3351.55)\nStacktrace:\n\tZwWaitLowEventPair [0x0x7ffe52a12a2c+2769580]\n\tGetHandleVerifier [0x0x7ff7751f8285+23461]\n\t(No symbol) [0x0x7ff77514c370]\n\t(No symbol) [0x0x7ff774f1ce40]\n\t(No symbol) [0x0x7ff774f0e05d]\n\t(No symbol) [0x0x7ff774f0cfdc]\n\t(No symbol) [0x0x7ff774f2b61a]\n\t(No symbol) [0x0x7ff774f8fd1b]\n\t(No symbol) [0x0x7ff774fa6e5a]\n\t(No symbol) [0x0x7ff774f8a423]\n\t(No symbol) [0x0x7ff774f5ea86]\n\t(No symbol) [0x0x7ff774f5dd11]\n\t(No symbol) [0x0x7ff774f5e8b3]\n\t(No symbol) [0x0x7ff77505dd3d]\n\t(No symbol) [0x0x7ff77506b0c8]\n\tGetHandleVerifier [0x0x7ff7752d80cb+940523]\n\tGetHandleVerifier [0x0x7ff7752e0e21+976705]\n\t(No symbol) [0x0x7ff775159f61]\n\t(No symbol) [0x0x7ff775152944]\n\t(No symbol) [0x0x7ff775152a93]\n\t(No symbol) [0x0x7ff775144536]\n\tuaw_wcsrchr [0x0x7ffe4f1909fc+962364]\n\tuaw_wcsrchr [0x0x7ffe4f127bb0+532720]\n\tZwWaitLowEventPair [0x0x7ffe5291c4c8+1760584]","time":{"start":1751267919851,"stop":1751267924703,"duration":4852}},{"uid":"bd240b2199672657","status":"passed","time":{"start":1751267692637,"stop":1751267716020,"duration":23383}},{"uid":"ddfa8a87926367b0","status":"passed","time":{"start":1751267557259,"stop":1751267579628,"duration":22369}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f8aa930f66512567.json","parameterValues":["'登录医药管理系统'","'admin'","'123456'"]}