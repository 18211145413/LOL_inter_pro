{"name": "test_medicien_manage", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: MicrosoftEdge=138.0.3351.55)\nStacktrace:\n\tZwWaitLowEventPair [0x0x7fff7bb12a2c+2769580]\n\tGetHandleVerifier [0x0x7ff6689e8285+23461]\n\t(No symbol) [0x0x7ff66893c370]\n\tGetHandleVerifier [0x0x7ff668c601b8+2611928]\n\t(No symbol) [0x0x7ff6686fce20]\n\t(No symbol) [0x0x7ff66871b61a]\n\t(No symbol) [0x0x7ff66877fd1b]\n\t(No symbol) [0x0x7ff668796e5a]\n\t(No symbol) [0x0x7ff66877a423]\n\t(No symbol) [0x0x7ff66874ea86]\n\t(No symbol) [0x0x7ff66874dd11]\n\t(No symbol) [0x0x7ff66874e8b3]\n\t(No symbol) [0x0x7ff66884dd3d]\n\t(No symbol) [0x0x7ff66885b0c8]\n\tGetHandleVerifier [0x0x7ff668ac80cb+940523]\n\tGetHandleVerifier [0x0x7ff668ad0e21+976705]\n\t(No symbol) [0x0x7ff668949f61]\n\t(No symbol) [0x0x7ff668942944]\n\t(No symbol) [0x0x7ff668942a93]\n\t(No symbol) [0x0x7ff668934536]\n\tuaw_wcsrchr [0x0x7fff788d09fc+962364]\n\tuaw_wcsrchr [0x0x7fff78867bb0+532720]\n\tZwWaitLowEventPair [0x0x7fff7ba1c4c8+1760584]", "trace": "def test_medicien_manage():\n    \n        login_llq = sele_setting.login(llq);\n    \n        time.sleep(3);\n    \n        login_llq.find_element(by=By.LINK_TEXT, value=\"管理\").click();\n    \n        time.sleep(3);\n    \n        login_llq.find_element(by=By.LINK_TEXT, value=\"药品\").click();\n    \n        time.sleep(3);\n    \n        frame1 = login_llq.find_element(by=By.XPATH,value=\"html/body/div/div/div[3]/iframe[2]\");\n    \n        login_llq.switch_to.frame(frame1);\n    \n        #获取执行添加前的总条数\n        num_text = login_llq.find_element(by=By.XPATH,value=\"html/body/div/div/div[2]/div[1]/div[3]/div[1]/span\").text.split(\"，\")[1];\n    \n        print(num_text[2:len(num_text)-3]);\n    \n    \n        login_llq.find_element(by=By.LINK_TEXT, value=\"添加\").click();\n    \n        time.sleep(5);\n    \n        login_llq.switch_to.default_content();\n    \n        time.sleep(5);\n    \n        add_frame = login_llq.find_element(by=By.XPATH,value=\"html/body/div[3]/div[2]/iframe\");\n    \n        time.sleep(3)\n        login_llq.switch_to.frame(add_frame);\n    \n        time.sleep(3);\n    \n        login_llq.find_element(by=By.NAME,value=\"productName\").send_keys(\"大力丸\");\n    \n        time.sleep(3);\n    \n        select_obj = login_llq.find_element(by=By.NAME, value=\"supplierId\");\n    \n        time.sleep(3)\n>       Select(select_obj).select_by_index(1);\n\n..\\case_f\\goods_doctor_sele.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\select.py:38: in __init__\n    if webelement.tag_name.lower() != \"select\":\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:85: in tag_name\n    return self._execute(Command.GET_ELEMENT_TAG_NAME)[\"value\"]\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024FD24B5438>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...f788d09fc+962364]\\\\n\\\\tuaw_wcsrchr [0x0x7fff78867bb0+532720]\\\\n\\\\tZwWaitLowEventPair [0x0x7fff7ba1c4c8+1760584]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: MicrosoftEdge=138.0.3351.55)\nE       Stacktrace:\nE       \tZwWaitLowEventPair [0x0x7fff7bb12a2c+2769580]\nE       \tGetHandleVerifier [0x0x7ff6689e8285+23461]\nE       \t(No symbol) [0x0x7ff66893c370]\nE       \tGetHandleVerifier [0x0x7ff668c601b8+2611928]\nE       \t(No symbol) [0x0x7ff6686fce20]\nE       \t(No symbol) [0x0x7ff66871b61a]\nE       \t(No symbol) [0x0x7ff66877fd1b]\nE       \t(No symbol) [0x0x7ff668796e5a]\nE       \t(No symbol) [0x0x7ff66877a423]\nE       \t(No symbol) [0x0x7ff66874ea86]\nE       \t(No symbol) [0x0x7ff66874dd11]\nE       \t(No symbol) [0x0x7ff66874e8b3]\nE       \t(No symbol) [0x0x7ff66884dd3d]\nE       \t(No symbol) [0x0x7ff66885b0c8]\nE       \tGetHandleVerifier [0x0x7ff668ac80cb+940523]\nE       \tGetHandleVerifier [0x0x7ff668ad0e21+976705]\nE       \t(No symbol) [0x0x7ff668949f61]\nE       \t(No symbol) [0x0x7ff668942944]\nE       \t(No symbol) [0x0x7ff668942a93]\nE       \t(No symbol) [0x0x7ff668934536]\nE       \tuaw_wcsrchr [0x0x7fff788d09fc+962364]\nE       \tuaw_wcsrchr [0x0x7fff78867bb0+532720]\nE       \tZwWaitLowEventPair [0x0x7fff7ba1c4c8+1760584]\n\nC:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "start": 1751274455092, "stop": 1751274509397, "uuid": "d8c97665-0744-4742-adc3-6df0a96cc94e", "historyId": "f59ec9cbc073f13006ff1e9ad50e172c", "testCaseId": "f59ec9cbc073f13006ff1e9ad50e172c", "fullName": "case_f.goods_doctor_sele#test_medicien_manage", "labels": [{"name": "parentSuite", "value": "case_f"}, {"name": "suite", "value": "goods_doctor_sele"}, {"name": "host", "value": "P7E7"}, {"name": "thread", "value": "136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case_f.goods_doctor_sele"}]}